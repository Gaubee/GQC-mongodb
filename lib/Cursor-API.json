[{
	"name": "new Cursor",
	"des": "Creates a new Cursor instance (INTERNAL TYPE, do not instantiate directly)",
	"params": [],
	"returns": [{
		"type": "{Cursor}"
	}]
}, {
	"name": "addCursorFlag",
	"des": "Add a cursor flag to the cursor",
	"params": [{
		"name": "flag",
		"type": "string",
		"default": "",
		"des": "The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'exhaust', 'partial'].",
		"properties": []
	}, {
		"name": "value",
		"type": "boolean",
		"default": "",
		"des": "The flag boolean value.",
		"properties": []
	}],
	"returns": [{
		"type": "{Cursor}"
	}]
}, {
	"name": "addQueryModifier",
	"des": "Add a query modifier to the cursor query",
	"params": [{
		"name": "name",
		"type": "string",
		"default": "",
		"des": "The query modifier (must start with $, such as $orderby etc)",
		"properties": []
	}, {
		"name": "value",
		"type": "boolean",
		"default": "",
		"des": "The flag boolean value.",
		"properties": []
	}],
	"returns": [{
		"type": "{Cursor}"
	}]
}, {
	"name": "batchSize",
	"des": "Set the batch size for the cursor.",
	"params": [{
		"name": "value",
		"type": "number",
		"default": "",
		"des": "The batchSize for the cursor.",
		"properties": []
	}],
	"returns": [{
		"type": "{Cursor}"
	}]
}, {
	"name": "",
	"des": "Clone the cursor",
	"params": [],
	"returns": [{
		"type": "{Cursor}"
	}]
}, {
	"name": "close",
	"des": "Close the cursor, sending a KillCursor command and emitting close.",
	"params": [{
		"name": "callback",
		"type": "Cursor~resultCallback",
		"default": "",
		"des": "The result callback.",
		"properties": []
	}],
	"returns": [{
		"type": "{Promise}"
	}]
}, {
	"name": "comment",
	"des": "Add a comment to the cursor query allowing for tracking the comment in the log.",
	"params": [{
		"name": "value",
		"type": "string",
		"default": "",
		"des": "The comment attached to this query.",
		"properties": []
	}],
	"returns": [{
		"type": "{Cursor}"
	}]
}, {
	"name": "count",
	"des": "Get the count of documents for this cursor",
	"params": [{
		"name": "applySkipLimit",
		"type": "boolean",
		"default": "",
		"des": "Should the count command apply limit and skip settings on the cursor or in the passed in options.",
		"properties": []
	}, {
		"name": "options",
		"type": "object",
		"default": "null",
		"des": "Optional settings.",
		"properties": [{
			"name": "skip",
			"type": "number",
			"default": "null",
			"des": "The number of documents to skip.",
			"properties": []
		}, {
			"name": "limit",
			"type": "number",
			"default": "null",
			"des": "The maximum amounts to count before aborting.",
			"properties": []
		}, {
			"name": "maxTimeMS",
			"type": "number",
			"default": "null",
			"des": "Number of miliseconds to wait before aborting the query.",
			"properties": []
		}, {
			"name": "hint",
			"type": "string",
			"default": "null",
			"des": "An index name hint for the query.",
			"properties": []
		}, {
			"name": "readPreference",
			"type": "ReadPreference|string",
			"default": "null",
			"des": "The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).",
			"properties": []
		}]
	}, {
		"name": "callback",
		"type": "Cursor~countResultCallback",
		"default": "",
		"des": "The result callback.",
		"properties": []
	}],
	"returns": [{
		"type": "{Promise}"
	}]
}, {
	"name": "each",
	"des": "Iterates over all the documents for this cursor. As with {cursor.toArray},\nnot all of the elements will be iterated if this cursor had been previouly accessed.\nIn that case, {cursor.rewind} can be used to reset the cursor. However, unlike\n{cursor.toArray}, the cursor will only hold a maximum of batch size elements\nat any given time if batch size is specified. Otherwise, the caller is responsible\nfor making sure that the entire result can fit the memory.",
	"params": [{
		"name": "callback",
		"type": "Cursor~resultCallback",
		"default": "",
		"des": "The result callback.",
		"properties": []
	}],
	"returns": [{
		"type": "{null}"
	}]
}, {
	"name": "explain",
	"des": "Execute the explain for the cursor",
	"params": [{
		"name": "callback",
		"type": "Cursor~resultCallback",
		"default": "",
		"des": "The result callback.",
		"properties": []
	}],
	"returns": [{
		"type": "{Promise}"
	}]
}, {
	"name": "filter",
	"des": "Set the cursor query",
	"params": [{
		"name": "filter",
		"type": "object",
		"default": "",
		"des": "The filter object used for the cursor.",
		"properties": []
	}],
	"returns": [{
		"type": "{Cursor}"
	}]
}, {
	"name": "forEach",
	"des": "Iterates over all the documents for this cursor using the iterator, callback pattern.",
	"params": [{
		"name": "iterator",
		"type": "Cursor~iteratorCallback",
		"default": "",
		"des": "The iteration callback.",
		"properties": []
	}, {
		"name": "callback",
		"type": "Cursor~endCallback",
		"default": "",
		"des": "The end callback.",
		"properties": []
	}],
	"returns": [{
		"type": "{null}"
	}]
}, {
	"name": "hasNext",
	"des": "Check if there is any document still available in the cursor",
	"params": [{
		"name": "callback",
		"type": "Cursor~resultCallback",
		"default": "",
		"des": "The result callback.",
		"properties": []
	}],
	"returns": [{
		"type": "{Promise}"
	}]
}, {
	"name": "hint",
	"des": "Set the cursor hint",
	"params": [{
		"name": "hint",
		"type": "object",
		"default": "",
		"des": "If specified, then the query system will only consider plans using the hinted index.",
		"properties": []
	}],
	"returns": [{
		"type": "{Cursor}"
	}]
}, {
	"name": "isClosed",
	"des": "Is the cursor closed",
	"params": [],
	"returns": [{
		"type": "{boolean}"
	}]
}, {
	"name": "limit",
	"des": "Set the limit for the cursor.",
	"params": [{
		"name": "value",
		"type": "number",
		"default": "",
		"des": "The limit for the cursor query.",
		"properties": []
	}],
	"returns": [{
		"type": "{Cursor}"
	}]
}, {
	"name": "map",
	"des": "Map all documents using the provided function",
	"params": [{
		"name": "transform",
		"type": "function",
		"default": "",
		"des": "The mapping transformation method.",
		"properties": []
	}],
	"returns": [{
		"type": "{null}"
	}]
}, {
	"name": "max",
	"des": "Set the cursor max",
	"params": [{
		"name": "max",
		"type": "object",
		"default": "",
		"des": "Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.",
		"properties": []
	}],
	"returns": [{
		"type": "{Cursor}"
	}]
}, {
	"name": "maxScan",
	"des": "Set the cursor maxScan",
	"params": [{
		"name": "maxScan",
		"type": "object",
		"default": "",
		"des": "Constrains the query to only scan the specified number of documents when fulfilling the query",
		"properties": []
	}],
	"returns": [{
		"type": "{Cursor}"
	}]
}, {
	"name": "maxTimeMS",
	"des": "Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)",
	"params": [{
		"name": "value",
		"type": "number",
		"default": "",
		"des": "Number of milliseconds to wait before aborting the query.",
		"properties": []
	}],
	"returns": [{
		"type": "{Cursor}"
	}]
}, {
	"name": "min",
	"des": "Set the cursor min",
	"params": [{
		"name": "min",
		"type": "object",
		"default": "",
		"des": "Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.",
		"properties": []
	}],
	"returns": [{
		"type": "{Cursor}"
	}]
}, {
	"name": "next",
	"des": "Get the next available document from the cursor, returns null if no more documents are available.",
	"params": [{
		"name": "callback",
		"type": "Cursor~resultCallback",
		"default": "",
		"des": "The result callback.",
		"properties": []
	}],
	"returns": [{
		"type": "{Promise}"
	}]
}, {
	"name": "nextObject",
	"des": "Get the next available document from the cursor, returns null if no more documents are available.",
	"params": [{
		"name": "callback",
		"type": "Cursor~resultCallback",
		"default": "",
		"des": "The result callback.",
		"properties": []
	}],
	"returns": [{
		"type": "{Promise}"
	}]
}, {
	"name": "",
	"des": "This method will cause a stream in flowing-mode to stop emitting data events. Any data that becomes available will remain in the internal buffer.",
	"params": [],
	"returns": [{
		"type": "{null}"
	}]
}, {
	"name": "",
	"des": "This method pulls all the data out of a readable stream, and writes it to the supplied destination, automatically managing the flow so that the destination is not overwhelmed by a fast readable stream.",
	"params": [{
		"name": "destination",
		"type": "Writable",
		"default": "",
		"des": "The destination for writing data",
		"properties": []
	}, {
		"name": "options",
		"type": "object",
		"default": "",
		"des": "Pipe options",
		"properties": []
	}],
	"returns": [{
		"type": "{null}"
	}]
}, {
	"name": "project",
	"des": "Sets a field projection for the query.",
	"params": [{
		"name": "value",
		"type": "object",
		"default": "",
		"des": "The field projection object.",
		"properties": []
	}],
	"returns": [{
		"type": "{Cursor}"
	}]
}, {
	"name": "",
	"des": "The read() method pulls some data out of the internal buffer and returns it. If there is no data available, then it will return null.",
	"params": [{
		"name": "size",
		"type": "number",
		"default": "",
		"des": "Optional argument to specify how much data to read.",
		"properties": []
	}],
	"returns": [{
		"type": "{String|Buffer|null}"
	}]
}, {
	"name": "",
	"des": "This method will cause the readable stream to resume emitting data events.",
	"params": [],
	"returns": [{
		"type": "{null}"
	}]
}, {
	"name": "returnKey",
	"des": "Set the cursor returnKey",
	"params": [{
		"name": "returnKey",
		"type": "object",
		"default": "",
		"des": "Only return the index field or fields for the results of the query. If $returnKey is set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields. Use one of the following forms:",
		"properties": []
	}],
	"returns": [{
		"type": "{Cursor}"
	}]
}, {
	"name": "",
	"des": "Resets the cursor",
	"params": [],
	"returns": [{
		"type": "{null}"
	}]
}, {
	"name": "setCursorOption",
	"des": "Set a node.js specific cursor option",
	"params": [{
		"name": "field",
		"type": "string",
		"default": "",
		"des": "The cursor option to set ['numberOfRetries', 'tailableRetryInterval'].",
		"properties": []
	}, {
		"name": "value",
		"type": "object",
		"default": "",
		"des": "The field value.",
		"properties": []
	}],
	"returns": [{
		"type": "{Cursor}"
	}]
}, {
	"name": "",
	"des": "Call this function to cause the stream to return strings of the specified encoding instead of Buffer objects.",
	"params": [{
		"name": "encoding",
		"type": "string",
		"default": "",
		"des": "The encoding to use.",
		"properties": []
	}],
	"returns": [{
		"type": "{null}"
	}]
}, {
	"name": "setReadPreference",
	"des": "Set the ReadPreference for the cursor.",
	"params": [{
		"name": "readPreference",
		"type": "string|ReadPreference",
		"default": "",
		"des": "The new read preference for the cursor.",
		"properties": []
	}],
	"returns": [{
		"type": "{Cursor}"
	}]
}, {
	"name": "showRecordId",
	"des": "Set the cursor showRecordId",
	"params": [{
		"name": "showRecordId",
		"type": "object",
		"default": "",
		"des": "The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.",
		"properties": []
	}],
	"returns": [{
		"type": "{Cursor}"
	}]
}, {
	"name": "skip",
	"des": "Set the skip for the cursor.",
	"params": [{
		"name": "value",
		"type": "number",
		"default": "",
		"des": "The skip for the cursor query.",
		"properties": []
	}],
	"returns": [{
		"type": "{Cursor}"
	}]
}, {
	"name": "snapshot",
	"des": "Set the cursor snapshot",
	"params": [{
		"name": "snapshot",
		"type": "object",
		"default": "",
		"des": "The $snapshot operator prevents the cursor from returning a document more than once because an intervening write operation results in a move of the document.",
		"properties": []
	}],
	"returns": [{
		"type": "{Cursor}"
	}]
}, {
	"name": "sort",
	"des": "Sets the sort order of the cursor query.",
	"params": [{
		"name": "keyOrList",
		"type": "string|array|object",
		"default": "",
		"des": "The key or keys set for the sort.",
		"properties": []
	}, {
		"name": "direction",
		"type": "number",
		"default": "",
		"des": "The direction of the sorting (1 or -1).",
		"properties": []
	}],
	"returns": [{
		"type": "{Cursor}"
	}]
}, {
	"name": "stream",
	"des": "Return a modified Readable stream including a possible transform method.",
	"params": [{
		"name": "options",
		"type": "object",
		"default": "null",
		"des": "Optional settings.",
		"properties": [{
			"name": "transform",
			"type": "function",
			"default": "null",
			"des": "A transformation method applied to each document emitted by the stream.",
			"properties": []
		}]
	}],
	"returns": [{
		"type": "{Cursor}"
	}]
}, {
	"name": "toArray",
	"des": "Returns an array of documents. The caller is responsible for making sure that there\nis enough memory to store the results. Note that the array only contain partial\nresults when this cursor had been previouly accessed. In that case,\ncursor.rewind() can be used to reset the cursor.",
	"params": [{
		"name": "callback",
		"type": "Cursor~toArrayResultCallback",
		"default": "",
		"des": "The result callback.",
		"properties": []
	}],
	"returns": [{
		"type": "{Promise}"
	}]
}, {
	"name": "",
	"des": "This method will remove the hooks set up for a previous pipe() call.",
	"params": [{
		"name": "destination",
		"type": "Writable",
		"default": "",
		"des": "The destination for writing data",
		"properties": []
	}],
	"returns": [{
		"type": "{null}"
	}]
}, {
	"name": "",
	"des": "This is useful in certain cases where a stream is being consumed by a parser, which needs to \"un-consume\" some data that it has optimistically pulled out of the source, so that the stream can be passed on to some other party.",
	"params": [{
		"name": "chunk",
		"type": "Buffer|string",
		"default": "",
		"des": "Chunk of data to unshift onto the read queue.",
		"properties": []
	}],
	"returns": [{
		"type": "{null}"
	}]
}, {
	"name": "",
	"des": "Versions of Node prior to v0.10 had streams that did not implement the entire Streams API as it is today. (See \"Compatibility\" below for more information.)",
	"params": [{
		"name": "stream",
		"type": "Stream",
		"default": "",
		"des": "An \"old style\" readable stream.",
		"properties": []
	}],
	"returns": [{
		"type": "{null}"
	}]
}, {
	"name": "countResultCallback",
	"des": "The callback format for results",
	"params": [{
		"name": "error",
		"type": "MongoError",
		"default": "",
		"des": "An error instance representing the error during the execution.",
		"properties": []
	}, {
		"name": "count",
		"type": "number",
		"default": "",
		"des": "The count of documents.",
		"properties": []
	}],
	"returns": []
}, {
	"name": "endCallback",
	"des": "The callback error format for the forEach iterator method",
	"params": [{
		"name": "error",
		"type": "MongoError",
		"default": "",
		"des": "An error instance representing the error during the execution.",
		"properties": []
	}],
	"returns": []
}, {
	"name": "iteratorCallback",
	"des": "The callback format for the forEach iterator method",
	"params": [{
		"name": "doc",
		"type": "Object",
		"default": "",
		"des": "An emitted document for the iterator",
		"properties": []
	}],
	"returns": []
}, {
	"name": "resultCallback",
	"des": "The callback format for results",
	"params": [{
		"name": "error",
		"type": "MongoError",
		"default": "",
		"des": "An error instance representing the error during the execution.",
		"properties": []
	}, {
		"name": "result",
		"type": "object|null|boolean",
		"default": "",
		"des": "The result object if the command was executed successfully.",
		"properties": []
	}],
	"returns": []
}, {
	"name": "toArrayResultCallback",
	"des": "The callback format for results",
	"params": [{
		"name": "error",
		"type": "MongoError",
		"default": "",
		"des": "An error instance representing the error during the execution.",
		"properties": []
	}, {
		"name": "documents",
		"type": "Array.<object>",
		"default": "",
		"des": "All the documents the satisfy the cursor.",
		"properties": []
	}],
	"returns": []
}]